# -*- coding: utf-8 -*-
"""Model_test_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PA2cM1ppyvtimZt8CFGPDNRQQCExqjN2
"""

from google.colab import drive
drive.mount('/content/drive')

import os 
from PIL import Image           
import numpy as np              # for numerical computationss
import pandas as pd             # for working with dataframes
import torch                    # Pytorch module 
import matplotlib.pyplot as plt # for plotting informations on graph and images using tensors
import torch.nn as nn           # for creating  neural networks
from torch.utils.data import DataLoader # for dataloaders 
from PIL import Image           # for checking images
import torch.nn.functional as F # for functions for calculating loss
import torchvision.transforms as transforms   # for transforming images into tensors 
from torchvision.utils import make_grid       # for data checking
from torchvision.datasets import ImageFolder  # for working with classes and images
from torchsummary import summary              # for getting the summary of our model

import torch 
import torch.nn as nn
import torch.nn.functional as F

from google.colab import files

root_dir = "/content/drive/My Drive/"
project_folder = "Colab Notebooks/My Project Folder/"

def create_and_set_working_directory(project_folder):
  if os.path.isdir(root_dir) == False:
    os.mkdir(root_dir)
    print(root_dir + ' did not exist but was created.')
  os.chdir(root_dir)

create_and_set_working_directory(root_dir)


# =============================//////////\\\\\\\\\\\\\===========================


class ImageClassificationBase(nn.Module):
    
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss
    
    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                   # Generate prediction
        loss = F.cross_entropy(out, labels)  # Calculate loss
        acc = accuracy(out, labels)          # Calculate accuracy
        return {"val_loss": loss.detach(), "val_accuracy": acc}
    
    def validation_epoch_end(self, outputs):
        batch_losses = [x["val_loss"] for x in outputs]
        batch_accuracy = [x["val_accuracy"] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()       # Combine loss  
        epoch_accuracy = torch.stack(batch_accuracy).mean()
        return {"val_loss": epoch_loss, "val_accuracy": epoch_accuracy} # Combine accuracies
    
    def epoch_end(self, epoch, result):
        print("Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_accuracy']))
        


# =============================//////////\\\\\\\\\\\\\===========================


def ConvBlock(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
             nn.BatchNorm2d(out_channels),
             nn.ReLU(inplace=True)]
    if pool:
        layers.append(nn.MaxPool2d(4))
    return nn.Sequential(*layers)


# =============================//////////\\\\\\\\\\\\\===========================

class ResNet9(ImageClassificationBase):
    def __init__(self, in_channels, num_diseases):
        super().__init__()
        
        self.conv1 = ConvBlock(in_channels, 64)
        self.conv2 = ConvBlock(64, 128, pool=True) # out_dim : 128 x 64 x 64 
        self.res1 = nn.Sequential(ConvBlock(128, 128), ConvBlock(128, 128))
        
        self.conv3 = ConvBlock(128, 256, pool=True) # out_dim : 256 x 16 x 16
        self.conv4 = ConvBlock(256, 512, pool=True) # out_dim : 512 x 4 x 44
        self.res2 = nn.Sequential(ConvBlock(512, 512), ConvBlock(512, 512))
        
        self.classifier = nn.Sequential(nn.MaxPool2d(4),
                                       nn.Flatten(),
                                       nn.Linear(512, num_diseases))
        
    def forward(self, xb): # xb is the loaded batch
        out = self.conv1(xb)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out            
# =============================//////////\\\\\\\\\\\\\===========================

disease_model = ResNet9(3, 45)

# =============================//////////\\\\\\\\\\\\\===========================

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# =============================//////////\\\\\\\\\\\\\===========================

disease_model.load_state_dict(torch.load('/content/drive/MyDrive/DeseaseDetction_latest.pth', device))

# =============================//////////\\\\\\\\\\\\\===========================

model=disease_model
model.eval()

# =============================//////////\\\\\\\\\\\\\===========================

test_dir = '/content/drive/MyDrive/PlantVillage'
train_dir = '/content/drive/MyDrive/train'
test = ImageFolder(test_dir, transform=transforms.ToTensor())
test_images = sorted(os.listdir(test_dir)) # since images in test folder are in alphabetical order

# =============================//////////\\\\\\\\\\\\\===========================

train = ImageFolder(train_dir, transforms.Compose([
            # transforms.Resize(256),
            transforms.RandomHorizontalFlip(), 
            transforms.ColorJitter(brightness=.5, hue=.3),
            transforms.ToTensor()
    ]))

# =============================//////////\\\\\\\\\\\\\===========================

# for moving data to device (CPU or GPU)
def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

# =============================//////////\\\\\\\\\\\\\===========================

# prediction functiom

def predict_image(img, model):
    xb = to_device(img.unsqueeze(0), device)
    yb = model(xb)
    _, preds  = torch.max(yb, dim=1)
    arr1 = yb.detach().numpy()
    arr1 = arr1[0]
    return train.classes[preds[0].item()],preds[0].item(),arr1[preds[0].item()]
    # return arr1[preds[0].item()]
    
# =============================//////////\\\\\\\\\\\\\===========================

!pwd

uploaded = files.upload()

for filename in uploaded.keys():
    # print(os.path.abspath(filename))
    path1 = os.path.abspath(filename)

image = Image.open(path1)

w, h = image.size
if(w !=256 or h !=256):
  image = image.resize((256, 256))
  
image_copy = image
to_tensor = transforms.ToTensor()
# Use the conversion function to convert the image to a tensor
image = to_tensor(image)

plt.imshow(image_copy)
print(predict_image(image, model))